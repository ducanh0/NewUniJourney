1 union find
  
  - quick find : a(i) = thành phần liên thông chứa i
      mỗi lần union phải chạy cả mảng để cập nhật
  -> chậm ở union

  - quick union : a(i) = tham chiếu trỏ tới nút gốc của cây chứa i
      khi union thì chỉ gần gán gốc cây này trỏ tới gốc cây kia
    -> chậm ở find

  - cải tiến : 
      + quick union có trọng số ( cho cây ít phần tử hơn làm con cây lớn hơn )
      
      + rút ngắn đường đi : sau khi đi từ nút x lên gốc cây của nó ( trong hàm find ) , ta đi lại đường đó một lần nữa để gán thẳng mỗi nút đó tới nút gốc luôn

  2 đánh giá thời gian chạy

  3 stack & queue

  - repeated doubling : khi cài đặt stack bằng mảng , khi mảng đầy thì nhân đôi độ dài mảng 
  - đợi mảng còn 1/4 thì mới giảm kích thước mảng đi 1/2

  - lập trình tổng quát
  - iterable : trả về 1 đối tượng iterator có các phương thức hasNext() , next(), remove() để duyệt các phần tử

  4 sort

  - call back : đại loại là truyền hàm customSort để hàm sort gọi tùy theo các loại dữ liệu

  - selection sort ( sắp xếp chọn ) : for N lần , ở lần lặp thứ i thì tìm phần tử nhỏ nhất còn lại rồi đổi chỗ với i , đại loại là mỗi lần lặp sẽ tìm thằng nhỏ nhất
để cho lên đầu

  - insertion sort ( sắp xếp chèn ) : for đến vị trí i thì sắp xếp luôn đoạn [ 1 ... i ] , hay nói cách khác là for đến i thì chèn i vào vị trí thích hợp luôn trong
dãy [ 1 ... i ] 

  - thuật toán tráo ngẫu nhiên knuth : for 1 -> N , ở vị trí i thì chọn j ngẫu nhiên trong [1, i) rồi đổi chỗ với i

  - merge sort : 
      + với các đoạn mảng nhỏ ( < 5 ) thì có thể dùng insertion sort để đỡ động đến mảng phụ ( sẽ dùng nếu là merge sort )
      + trước khi merge kiểm tra a(mid) <= a(mid + 1) có đúng không , có thì không cần merge

  - bottom up merge sort : for độ dài từ dưới lên ( 1 2 ... n ) để merge các đoạn đã sort vào

  - shell sort : chia mảng thành các mảng con cách nhau một khoảng h ([1 ,1 + h ,1 + 2h, ...] [2, 2 + h, 2 + 2h , ...], [3, 3 + h, 3 + 2h, ...] ...)
( sau đó sort các mảng con bằng insertion sort ) , sau đó giảm dần h và lặp lại như thế

  - quick sort : 
      +  với các đoạn mảng nhỏ ( < 5 ) thì có thể dùng insertion sort
      + mỗi lần lấy khóa thì lấy ra 1 tập nhỏ và lấy giá trị giữa trong nhóm đó
  - tìm phần tử nhỏ thứ k : 
      + khá giống quick sort , chọn 1 khóa và phân mảng thành 2 phần , bên trái không lớn hơn nó và bên phải không nhỏ hơn nó
      + tùy thuộc k lớn hơn hay nhỏ hơn vị trí khóa để tìm tiếp với nửa trái hay nửa phải

  - phân hoạch chia 3 : khi quicksort dùng 2 con trỏ để chia mảng làm 3 đoạn ( nhỏ hơn , bằng , lớn hơn khóa )


  5 priority queue 

  - cài đặt bằng binary heap : cây nhị phân mà mỗi nút có 2 nút con ( nút cha lớn hơn cả 2 nút con , heap min thì làm ngược lại )

  nút i có 2 con ở vị trí 2 * i , 2 * i + 1 ( lưu trong mảng ) -> nút cha nút i là i / 2

  khi thêm một nút mới vào tầng dưới cùng ( thêm vào cuối mảng ) , nếu nó vi phạm thì chỉ việc truy vết đường đi từ đó lên nút gốc và đổi chỗ với những nút cha
  mà nhỏ hơn nó thôi , căn bản thì thứ tự trên đường đi đó sẽ không vị phạm ( vì thứ tự các nút cha đã được sắp xếp từ trước đó )

  lưu ý là mảng bắt đầu từ 1

  - khi xóa nút gốc thì đổi chỗ nó với phần tử cuối mảng , sau đó xóa nút gốc đó , sau đó ta tìm cách đẩy nút gốc "tạm thời" đó xuống
  giả sử nút vi phạm thứ tự đó đang ở vị trí k , xét 2 nút con 2 * k , 2 * k + 1 , rõ ràng là ta cần đẩy 1 nút con lên , ta sẽ chọn nút con lớn hơn lên
  để đảm bảo thứ tự , lặp lại như thế cho đến khi đảm bảo thứ tự

  - heapsort : biến mảng ban đầu thành 1 cây heap , sau đó xóa dần nút gốc , kiểu quăng nó xuống cuối mảng , dần dần sẽ được 1 mảng được sắp xếp

  tạo heap : bắt đầu từ n / 2 về 1 , đẩy các nút đó xuống , vì các nút > n / 2 toàn là các nút lá

  - tính ổn định : là có đổi chỗ các phần tử có giá trị bằng nhau hay không

  6 bảng tra cứu ( giống map )
    - có thể dùng danh sách liên kết + duyệt tuần tự hay mảng + chặt nhị phân ( nhma phải sắp xếp liên tục để đảm bảo thứ tự )

  7 binary search tree ( bst )

  - nút con trái < key nút cha < nút con phải

  - để duyệt bằng iterator ( duyệt qua các phần tử của cây ) thì dùng đệ quy , 1 cái queue kết nạp tất cả các nút vào queue đó , có 3 kiểu
  pre-order , in-order, post-order ( phân loại dựa vào thứ tự kết nạp nút cha trước/trong/sau khi thăm các nhánh con )

  - hibbard deletion ( xóa trong bst ) 
    th1 : nút cần xóa không có con -> gán là null
    th2 : nút cần xóa có 1 con -> con con vào vị trí nó luôn ( trỏ từ cha nó tới thẳng con nó )
    th3 : nút cần xóa có 2 con , ta bốc nút nhỏ nhất trong cây con phải lên thay thế nút cần xóa

  8 các cây tìm kiếm cân bằng

  11 . cây 2-3

    - là phiên bản mở rộng của bst , 1 nút có 2 key a < b, có 3 nút con tương ứng với 3 khoảng < a , a < ... < b , > b
    - insert : 
        + đi từ trên xuống theo các nhánh , khi cần insert vào 1 nút 
            ++ nếu nút có 1 key thì biến nó thành nút 2 key
            ++ nếu nút đó có 2 key thì thêm vào thành nút 3 key , sau đó đẩy giá trị ở giữa lên trên (đệ quy) và tách thành 2 nút 1 key 
                (ví dụ nút đó là abc thì tách thành nút a và nút c và đẩy b lên trên (đệ quy, làm giống thế này đến khi cây hợp lệ))

  12 . cây đỏ đen nghiêng trái

    - với mỗi nút 3 trong cây 2-3 thì ta tạo "link ảo" , ví dụ nút 3 a b -> nút cha là b nối đến a , link ảo gọi là link đỏ , các link ban đầu gọi là link đen
    - nếu một link đỏ nghiêng phải thì ta thực hiện phép xoay trái
    - đôi lúc khi insert thì ta phải tạm thời xoay phải , sau đó xoay trái sau @@
    - đổi màu : khi mà một nút có 2 link đỏ nối tới 2 nút con -> sửa 2 link đó thành đen , sửa link từ nó lên nút cha thành đỏ


9 bảng băm

  - seperate chaining ( 1 cách để giải quyết xung đột khi các key khác nhau được hash về cùng 1 giá trị ) : với mỗi ô trong bảng hash sẽ liên kết với
      1 danh sách liên kết , nếu bị ánh xạ trùng thì cứ việc push vào danh sách liên kết đó , lúc search phải duyệt cả danh sách liên kết

  - linear probing : dùng 1 mảng duy nhất , nếu bị xung đột thì tìm ô trống gần nhất

  khi search thì for từ ô ánh xạ tiếp đến khi tìm thấy hoặc gặp ô trống ( kết luận k tìm thấy , vì nếu có trong bảng thì đã nhồi vào ô trống đó r )

  có thể dùng mảng tự điều chỉnh kích thước để tránh có quá nhiều key trong mảng 

10 đồ thị

- bậc của một đỉnh là số đỉnh kề với đỉnh đó , bậc vào, ra (có hướng)

