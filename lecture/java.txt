- jvm - java virtual machine

run bytecode , each operating system has different jvm , the output is the same across all 
operating systems

bytecode is .class

- jdk - java development kit

include jre (java runtime environment) , compliers , javadoc  , java debugger , etc

- jre

can run java program however won't be able to compile it
- 
long ( = long long in c++)
long a = 23L  ;

float a = 2.3f ; (khong co 'f' se bi hieu la double)

- oop

1. tính trừu tượng 

	chỉ hiển thị những gì người khác cần biết và ẩn những thứ còn lại 
	ví dụ : nồi cơm điện thì ngta chỉ cần biết các công tắc điều khiển làm chức năng nào , còn lại nó thực hiện nnao thì ng dùng k cần biết 

2. tính đóng gói

	gom hết các trạng thái và chức năng cần thiết của 1 kiểu thực thể về 1 chỗ (nnay thì khi sửa code chỉ cần sửa một nơi , các nơi dùng nó k bị ảnh hưởng)

3. kế thừa 

	tránh trùng lặp code , lớp con kế thừa lớp cha

4. đa hình

	mỗi thg con kế thừa thg cha sẽ có cách thực hiện riêng dù cùng làm 1 chức năng (ví dụ : các loại động vật kêu khác nhau)

java không hỗ trợ đa kế thừa (1 con kế thừa nhiều cha một lúc) :((


- overloading 
	được định nghĩa các hàm tên giống hệt nhau nhma khác danh sách tham số 
	nếu không có hàm nào khớp hoàn toàn thì tham số có thể được ép kiểu tự động sang kiểu lớn hơn nếu hàm nào đó khớp kiểu lớn hơn 
	ví dụ : add(2, 1.5f) có thể gọi đến hàm add(int , double) nếu hàm add(int , float) không tồn tại , máy sẽ tự động ép kiểu float -> double
java không hỗ trợ operator overloading :((

- overridding

	một class con nào đó triển khai cách làm khác khi thực hiện 1 hàm đc kế thừa mà k ảnh hưởng code ở thg cha
	super.ham() -> gọi hàm 'ham()' của class cha
	super() -> gọi hàm constructor của class cha

	static , private , final không thể overriding !!

- static block : 
	static{
		khởi tạo các biến static 
	}
	static{
		nếu viết nhiều static block kiểu này thì giá trị đã khởi tạo có thể bị ghi đè trong các static block bên dưới
	}

- this(para1, para2, ... , paraN) -> gọi đến hàm constructor tương ứng trong chính class đó

- abstract class A {
	abstract method B (); // class con PHẢI định nghĩa lại hàm này 

	method C () {
		// code như bình thường , class con có thể kế thừa hàm này luôn
	}
}

mọi class con PHẢI định nghĩa lại TOÀN BỘ hàm abstract , nếu không thì class con đó PHẢI LÀ abstract

bất kỳ thg con nào kế thừa A thì đều phải định nghĩa lại hàm B , abstract để biến điều này thành bắt buộc 

- interface : toàn bộ method trong interface mặc định là public abstract , class con kế thừa vs cú pháp
	interface B {
		// có thể kế thừa 'extends' NHIỀU interface khác

		// biến mặc định là public static final , cần đc khởi tạo giá trị ngay khi khai báo

		// các hàm public abstract , KHÔNG đc chứa hàm có body

		int add(int a, int b); // khai báo nnay cx dc, máy sẽ mặc định là public abstract
	}

	class A implements B {
		// override toàn bộ hàm của interface B

		// một class được phép implements nhiều hơn một interface

		// khi implements nhiều interface , nếu biến trùng tên thì dùng tên interface để phân loại, ví dụ : B.x , C.x
		// còn hàm nếu trùng thì phải giống nhau , chỉ cần implements 1 lần

	}
- package : nhóm các class , interface lại với nhau khi làm project
	-> tiện lợi cho việc tìm kiếm 
	-> sắp xếp cấu trúc rõ ràng hơn

	thứ tự khi vừa import vừa tạo package mới :
		+ package declaration
		+ package import


	package a.b ; // create sub-package b inside package a

- System.gc() ; // call garbage collection , if not call then jvm call it automatically later

- final variable : khởi tạo ngay hoặc khởi tạo trong hàm constructor

- final class không thể được kế thừa

- finally block : luôn thực thi dù có exception hay không 

- throws : nếu dùng cái này khi khai báo hàm thì những nơi dùng hàm này PHẢI dùng cú pháp try / catch để xử lý lỗi có thể xảy ra của hàm này

- catch(Exception e){
  //This catch block catches all the exceptions
}

- throw new exception_class("error message");

- public void myMethod() throws ArithmeticException, NullPointerException
{
  // Statements that might throw an exception 
}

bất cứ đâu gọi hàm này thì BẮT BUỘC phải handle hết các exception được khai báo 

- khi gọi constructor ở class con thì super() sẽ được tự động gọi constructor class cha , mục đích là khởi tạo các biến được kế thừa nhưng đối tượng được trỏ đến vẫn thuộc class con 

- generics same as template in c++

- Vector, ArrayList same as vector in c++

  LinkedList : danh sách liên kết đơn

 map & set cannot contain duplicate keys

  hashset = unordered_set in c++

  linkedhashset = hashset + lưu thứ tự nhập đầu vào

  treeset = set in c++

  hashmap similar to hashset

  treemap similar to treeset

  linkedhashmap simiar to linkedhashset


  - khi một tham chiếu gọi một phương thức , thì phương thức đó PHẢI nằm trong class hay interface của kiểu tham chiếu đó , khi chạy runtime thì sẽ chạy phiên bản của đối tượng mà tham chiếu trỏ đến (ví dụ : Human a = new Teacher() , a.speak() -> chỉ gọi được nnay nếu speak() có trong Human , khi chạy thì sẽ gọi các phiên bản tùy thuộc xem Teacher có ghi đè phương thức speak() của Human hay không )

// custom sort 
  - comparable interface

class A implements Comparable<A>{
	data1;
	data2;
	...
	dataN;

	@Override
	public int compareTo(A other){
		return ( negative if this < other
			0 if this = other
			positive if this > other ) ;
	}
}
Collections.sort(name) ; 

- comparator interface : can sort base on any critiria we want , we can sort base on age , name , etc , whatever we want

class customOrder1 implements comparator<A> {
	public int compare(A a,A b){
		return ( negative if a < b
			0 if a = b
			positive if a > b) ;
	}
}

class customOrder2 implements comparator<A> {
	public int compare(A a,A b){
		return ( negative if a < b
			0 if a = b
			positive if a > b) ;
	}
}
...

Collections.sort(name, new customOrder1()) ;

- varargs : co the truyen bao nhieu tham so tuy thich , complier tu dong tao mang [] de luu cac tham so do nguoi dung truyen vao

int sum(int ... args){
	// complier tu dong chuyen thanh int [] args
	// luu y la chi duoc 1 ham chi duoc co DUY NHAT mot vararg va no PHAI xuat hien o CUOI danh sach tham so
}


- runable , thread , callable , future, concurrent , executor
